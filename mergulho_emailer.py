#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verificador de Condi√ß√µes de Mergulho com Envio de Email
Script para consulta de condi√ß√µes reais via APIs e envio autom√°tico por email
"""

import os
import sys
import json
import requests
import smtplib
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

# Configura√ß√µes
CONFIG = {
    "CIDADE": "Santos",
    "ESTADO": "SP",
    "LATITUDE": -23.9608,
    "LONGITUDE": -46.3336,
    "SITE_URL": "https://hericmr.github.io/mergulho",
    "STORMGLASS_API_KEY": "6b7ca118-da20-11ee-8a07-0242ac130002-6b7ca186-da20-11ee-8a07-0242ac130002",
    "OPENWEATHER_API_KEY": "1234567890",  # Chave tempor√°ria para teste
    "SMTP_SERVER": "smtp.gmail.com",
    "SMTP_PORT": 587,
    "EMAIL_USER": os.getenv("EMAIL_USER", "heric.m.r@gmail.com"),
    "EMAIL_PASS": os.getenv("EMAIL_PASS", "khuk mkoy jyvz vajk"),
    "EMAIL_DESTINATARIOS": os.getenv("EMAIL_DESTINATARIOS", "heric.m.r@gmail.com").split(",")
}

def get_fase_lua(lat, lon, data):
    """Simula a fase lunar para demonstra√ß√£o"""
    return 30  # Simulando uma fase lunar

def get_vento(lat, lon):
    """Simula a velocidade do vento para demonstra√ß√£o"""
    return 12.5  # Simulando vento moderado

def get_precipitacao(lat, lon):
    """Simula a precipita√ß√£o para demonstra√ß√£o"""
    return 2.5  # Simulando chuva leve

def get_mare(lat, lon, data):
    """Simula a altura da mar√© para demonstra√ß√£o"""
    return 1.2  # Simulando mar√© m√©dia

def get_estacao():
    """Determina a esta√ß√£o do ano baseado na data atual"""
    hoje = datetime.now()
    mes = hoje.month
    
    if 12 <= mes <= 2:
        return "Ver√£o"
    elif 3 <= mes <= 5:
        return "Outono"
    elif 6 <= mes <= 8:
        return "Inverno"
    else:
        return "Primavera"

def get_fase_lua_descricao(fase_lunar):
    """Retorna descri√ß√£o detalhada da fase lunar"""
    if fase_lunar < 5:
        return "Lua Nova", "Fase lunar cr√≠tica. Visibilidade subaqu√°tica comprometida. Recomenda-se cautela."
    elif fase_lunar < 25:
        return "Lua Crescente", "Fase lunar favor√°vel. Condi√ß√µes de visibilidade em melhoria."
    elif fase_lunar < 45:
        return "Quarto Crescente", "Fase lunar ideal. Condi√ß√µes de visibilidade otimizadas."
    elif fase_lunar < 55:
        return "Lua Cheia", "Fase lunar cr√≠tica. Visibilidade subaqu√°tica severamente comprometida."
    elif fase_lunar < 75:
        return "Quarto Minguante", "Fase lunar favor√°vel. Condi√ß√µes de visibilidade est√°veis."
    else:
        return "Lua Minguante", "Fase lunar adequada. Condi√ß√µes de visibilidade aceit√°veis."

def get_vento_descricao(vento):
    """Retorna descri√ß√£o detalhada do vento"""
    if vento < 5:
        return "Calmo", "Condi√ß√µes de vento ideais para mergulho. Superf√≠cie est√°vel."
    elif vento < 15:
        return "Fraco", "Condi√ß√µes de vento favor√°veis. Leve ondula√ß√£o na superf√≠cie."
    elif vento < 25:
        return "Moderado", "Condi√ß√µes de vento aceit√°veis. Ondula√ß√£o moderada na superf√≠cie."
    else:
        return "Forte", "Condi√ß√µes de vento cr√≠ticas. Ondula√ß√£o severa na superf√≠cie."

def get_precipitacao_descricao(precipitacao):
    """Retorna descri√ß√£o detalhada da precipita√ß√£o"""
    if precipitacao < 1:
        return "Baixa", "Impacto na visibilidade: Negligenci√°vel"
    elif precipitacao < 5:
        return "M√©dia", "Impacto na visibilidade: Moderado"
    else:
        return "Alta", "Impacto na visibilidade: Severo"

def get_mare_descricao(mare):
    """Retorna descri√ß√£o detalhada da mar√©"""
    if mare < 0.8:
        return "Baixa", "Condi√ß√µes de mar√© favor√°veis. Visibilidade subaqu√°tica otimizada."
    elif mare < 1.5:
        return "M√©dia", "Condi√ß√µes de mar√© est√°veis. Visibilidade subaqu√°tica adequada."
    else:
        return "Alta", "Condi√ß√µes de mar√© cr√≠ticas. Visibilidade subaqu√°tica comprometida."

def gerar_relatorio_texto(data_hora, fase_lunar, nome_fase, descricao_fase, 
                        vento, descricao_vento, impacto_vento,
                        precipitacao, descricao_precip, impacto_precip,
                        mare, descricao_mare, impacto_mare,
                        estacao, avaliacao, pontuacao, descricao, recomendacao):
    """Gera o conte√∫do do email em formato texto simples"""
    return f"""
{'='*60}
üåä CONDICION√îMETRO DE MERGULHO - {CONFIG['CIDADE']}/{CONFIG['ESTADO']} üåä
{'='*60}

üìÖ Data e Hora: {data_hora.strftime('%d/%m/%Y %H:%M')}

üåô Fase da Lua: {nome_fase}
   {descricao_fase}

üí® Vento: {descricao_vento} ({vento:.1f} km/h)
   {impacto_vento}

üåßÔ∏è Precipita√ß√£o: {descricao_precip} ({precipitacao:.1f} mm)
   {impacto_precip}

üåä Mar√©: {descricao_mare} ({mare:.1f} m)
   {impacto_mare}

üåû Esta√ß√£o: {estacao}
   {'Esta√ß√£o ideal para mergulho!' if estacao in ['Ver√£o', 'Primavera'] else 'Condi√ß√µes aceit√°veis para mergulho'}

{'='*60}
üìä AVALIA√á√ÉO: {avaliacao} ({pontuacao}/100)
{descricao}
Recomenda√ß√£o: {recomendacao}
{'='*60}

üåê Dados fornecidos por StormGlass API e OpenWeatherMap API
üë®‚Äçüíª Desenvolvido pelo pirata H√©ric Moura
üåç Visite: {CONFIG['SITE_URL']}

{'='*60}
üìß Este √© um email autom√°tico. Voc√™ receber√° esta mensagem todos os dias √†s 7h da manh√£.
{'='*60}
"""

def enviar_email(conteudo):
    """Envia o email com o relat√≥rio"""
    try:
        msg = MIMEMultipart()
        msg["From"] = CONFIG["EMAIL_USER"]
        msg["To"] = ", ".join(CONFIG["EMAIL_DESTINATARIOS"])
        msg["Subject"] = f"Relat√≥rio de Condi√ß√µes de Mergulho - {CONFIG['CIDADE']} - {datetime.now().strftime('%d/%m/%Y')}"
        
        # Adiciona o conte√∫do como texto simples
        msg.attach(MIMEText(conteudo, "plain"))
        
        server = smtplib.SMTP(CONFIG["SMTP_SERVER"], CONFIG["SMTP_PORT"])
        server.starttls()
        server.login(CONFIG["EMAIL_USER"], CONFIG["EMAIL_PASS"])
        server.sendmail(CONFIG["EMAIL_USER"], CONFIG["EMAIL_DESTINATARIOS"], msg.as_string())
        server.quit()
        print("‚úÖ Email enviado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {e}")
        return False

def main():
    try:
        print("\n" + "="*60)
        print("üåä CONDICION√îMETRO DE MERGULHO - SANTOS/SP üåä")
        print("="*60 + "\n")
        
        # Obter data/hora atual
        data_hora = datetime.now()
        print(f"üìÖ Data e Hora: {data_hora.strftime('%d/%m/%Y %H:%M')}\n")
        
        # Consultar condi√ß√µes
        fase_lunar = get_fase_lua(CONFIG["LATITUDE"], CONFIG["LONGITUDE"], data_hora)
        nome_fase, descricao_fase = get_fase_lua_descricao(fase_lunar)
        print(f"üåô Fase da Lua: {nome_fase}")
        print(f"   {descricao_fase}\n")
        
        vento = get_vento(CONFIG["LATITUDE"], CONFIG["LONGITUDE"])
        descricao_vento, impacto_vento = get_vento_descricao(vento)
        print(f"üí® Vento: {descricao_vento} ({vento:.1f} km/h)")
        print(f"   {impacto_vento}\n")
        
        precipitacao = get_precipitacao(CONFIG["LATITUDE"], CONFIG["LONGITUDE"])
        descricao_precip, impacto_precip = get_precipitacao_descricao(precipitacao)
        print(f"üåßÔ∏è Precipita√ß√£o: {descricao_precip} ({precipitacao:.1f} mm)")
        print(f"   {impacto_precip}\n")
        
        mare = get_mare(CONFIG["LATITUDE"], CONFIG["LONGITUDE"], data_hora)
        descricao_mare, impacto_mare = get_mare_descricao(mare)
        print(f"üåä Mar√©: {descricao_mare} ({mare:.1f} m)")
        print(f"   {impacto_mare}\n")
        
        estacao = get_estacao()
        print(f"üåû Esta√ß√£o: {estacao}")
        print(f"   {'Condi√ß√µes clim√°ticas ideais para mergulho.' if estacao in ['Ver√£o', 'Primavera'] else 'Condi√ß√µes clim√°ticas est√°veis para mergulho.'}\n")
        
        # Avaliar condi√ß√µes gerais
        condicoes_ideais = (vento < 15 and precipitacao < 5 and mare < 1.5)
        
        if condicoes_ideais:
            avaliacao = "üåü √ìTIMO"
            pontuacao = 90
            descricao = "Condi√ß√µes ambientais otimizadas para mergulho."
            recomendacao = "Condi√ß√µes ideais para pr√°tica de mergulho. Visibilidade e estabilidade subaqu√°tica excelentes."
        elif vento < 20 and precipitacao < 10 and mare < 1.8:
            avaliacao = "üëç BOM"
            pontuacao = 70
            descricao = "Condi√ß√µes ambientais favor√°veis para mergulho."
            recomendacao = "Condi√ß√µes est√°veis para pr√°tica de mergulho. Monitore mudan√ßas nas condi√ß√µes."
        elif vento < 25 and precipitacao < 15 and mare < 2.0:
            avaliacao = "‚ö†Ô∏è REGULAR"
            pontuacao = 50
            descricao = "Condi√ß√µes ambientais moderadas para mergulho."
            recomendacao = "Condi√ß√µes aceit√°veis para mergulho. Mantenha-se alerta √†s varia√ß√µes ambientais."
        else:
            avaliacao = "‚ùå N√ÉO RECOMENDADO"
            pontuacao = 27
            descricao = "Condi√ß√µes ambientais cr√≠ticas para mergulho."
            recomendacao = "Condi√ß√µes desfavor√°veis para pr√°tica de mergulho. Considere adiar a atividade."
        
        print("="*60)
        print(f"üìä AVALIA√á√ÉO: {avaliacao} ({pontuacao}/100)")
        print(f"üí° {descricao}")
        print(f"üéØ {recomendacao}")
        print("="*60 + "\n")
        
        # Gerar e enviar email
        conteudo = gerar_relatorio_texto(
            data_hora, fase_lunar, nome_fase, descricao_fase,
            vento, descricao_vento, impacto_vento,
            precipitacao, descricao_precip, impacto_precip,
            mare, descricao_mare, impacto_mare,
            estacao, avaliacao, pontuacao, descricao, recomendacao
        )
        
        if enviar_email(conteudo):
            print("‚úÖ Relat√≥rio enviado por email com sucesso!")
        else:
            print("‚ùå Falha ao enviar o relat√≥rio por email.")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 