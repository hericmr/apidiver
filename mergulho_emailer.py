#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verificador de Condi√ß√µes de Mergulho com Envio de Email
Script para consulta de condi√ß√µes reais via APIs e envio autom√°tico por email
"""

import os
import sys
import json
import requests
import smtplib
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
import random

# Configura√ß√µes
CONFIG = {
    "CIDADE": "Santos",
    "ESTADO": "SP",
    "LATITUDE": -23.9608,
    "LONGITUDE": -46.3336,
    "SITE_URL": "https://hericmr.github.io/mergulho",
    "STORMGLASS_API_KEY": "6b7ca118-da20-11ee-8a07-0242ac130002-6b7ca186-da20-11ee-8a07-0242ac130002",
    "OPENWEATHER_API_KEY": "1234567890",  # Chave tempor√°ria para teste
    "SMTP_SERVER": "smtp.gmail.com",
    "SMTP_PORT": 587,
    "EMAIL_USER": os.getenv("EMAIL_USER", "heric.m.r@gmail.com"),
    "EMAIL_PASS": os.getenv("EMAIL_PASS", "khuk mkoy jyvz vajk"),
    "EMAIL_DESTINATARIOS": os.getenv("EMAIL_DESTINATARIOS", "heric.m.r@gmail.com").split(",")
}

def get_fase_lua(lat, lon, data):
    """Retorna a fase lunar atual usando a API do U.S. Naval Observatory"""
    try:
        # Data atual em formato YYYY-MM-DD para a API USNO
        data_formatada = data.strftime('%Y-%m-%d')
        
        # Usar a API do U.S. Naval Observatory (USNO)
        url = f"https://aa.usno.navy.mil/api/moon/phases/date?date={data_formatada}&nump=4"
        
        response = requests.get(url)
        if response.ok:
            dados = response.json()
            
            if dados and dados.get('phasedata'):
                # Ordenar fases por proximidade da data atual
                fases = sorted(dados['phasedata'], 
                             key=lambda x: abs(datetime.strptime(f"{x['year']}-{x['month']}-{x['day']}", '%Y-%m-%d') - data))
                
                fase_proxima = fases[0]
                data_fase = datetime.strptime(f"{fase_proxima['year']}-{fase_proxima['month']}-{fase_proxima['day']}", '%Y-%m-%d')
                
                # Calcular diferen√ßa em dias
                dif_dias = abs((data - data_fase).days)
                
                # Converter fase para valor num√©rico
                fase_map = {
                    'New Moon': 0,
                    'First Quarter': 25,
                    'Full Moon': 50,
                    'Last Quarter': 75
                }
                
                fase_base = fase_map.get(fase_proxima['phase'], 0)
                
                # Ajustar fase baseado na diferen√ßa de dias
                if dif_dias > 0:
                    if fase_base == 0:  # Lua Nova
                        return min(dif_dias * 3.5, 25)  # Crescente
                    elif fase_base == 25:  # Quarto Crescente
                        return min(25 + dif_dias * 3.5, 50)  # Crescente Gibosa
                    elif fase_base == 50:  # Lua Cheia
                        return min(50 + dif_dias * 3.5, 75)  # Minguante Gibosa
                    else:  # Quarto Minguante
                        return min(75 + dif_dias * 3.5, 100)  # Minguante
                
                return fase_base
    except Exception as e:
        print(f"Erro ao consultar fase da lua: {e}")
    
    # Fallback: usar OpenWeatherMap
    try:
        url = f"https://api.openweathermap.org/data/3.0/onecall?lat={lat}&lon={lon}&exclude=minutely,hourly,alerts&appid={CONFIG['OPENWEATHER_API_KEY']}"
        response = requests.get(url)
        if response.ok:
            dados = response.json()
            if dados and dados.get('daily'):
                fase = dados['daily'][0]['moon_phase']
                return fase * 100  # Converter para escala 0-100
    except Exception as e:
        print(f"Erro no fallback OpenWeatherMap: {e}")
    
    # Se tudo falhar, retornar um valor simulado
    return random.randint(0, 100)

def get_vento(lat, lon):
    """Simula a velocidade do vento para demonstra√ß√£o"""
    return 12.5  # Simulando vento moderado

def get_precipitacao(lat, lon):
    """Simula a precipita√ß√£o para demonstra√ß√£o"""
    return 2.5  # Simulando chuva leve

def get_mare(lat, lon, data):
    """Simula a altura da mar√© para demonstra√ß√£o"""
    return 1.2  # Simulando mar√© m√©dia

def get_estacao():
    """Determina a esta√ß√£o do ano baseado na data atual"""
    hoje = datetime.now()
    mes = hoje.month
    
    if 12 <= mes <= 2:
        return "Ver√£o"
    elif 3 <= mes <= 5:
        return "Outono"
    elif 6 <= mes <= 8:
        return "Inverno"
    else:
        return "Primavera"

def get_fase_lua_descricao(fase_lunar):
    """Retorna descri√ß√£o detalhada da fase lunar"""
    if fase_lunar < 5:
        return "Lua Nova", "Fase lunar cr√≠tica. Visibilidade subaqu√°tica comprometida. Recomenda-se cautela."
    elif fase_lunar < 25:
        return "Lua Crescente", "Fase lunar favor√°vel. Condi√ß√µes de visibilidade em melhoria."
    elif fase_lunar < 45:
        return "Quarto Crescente", "Fase lunar ideal. Condi√ß√µes de visibilidade otimizadas."
    elif fase_lunar < 55:
        return "Lua Cheia", "Fase lunar cr√≠tica. Visibilidade subaqu√°tica severamente comprometida."
    elif fase_lunar < 75:
        return "Quarto Minguante", "Fase lunar favor√°vel. Condi√ß√µes de visibilidade est√°veis."
    else:
        return "Lua Minguante", "Fase lunar adequada. Condi√ß√µes de visibilidade aceit√°veis."

def get_vento_descricao(vento):
    """Retorna descri√ß√£o detalhada do vento"""
    if vento < 5:
        return "Calmo", "Condi√ß√µes de vento ideais para mergulho. Superf√≠cie est√°vel."
    elif vento < 15:
        return "Fraco", "Condi√ß√µes de vento favor√°veis. Leve ondula√ß√£o na superf√≠cie."
    elif vento < 25:
        return "Moderado", "Condi√ß√µes de vento aceit√°veis. Ondula√ß√£o moderada na superf√≠cie."
    else:
        return "Forte", "Condi√ß√µes de vento cr√≠ticas. Ondula√ß√£o severa na superf√≠cie."

def get_precipitacao_descricao(precipitacao):
    """Retorna descri√ß√£o detalhada da precipita√ß√£o"""
    if precipitacao < 1:
        return "Baixa", "Impacto na visibilidade: Negligenci√°vel"
    elif precipitacao < 5:
        return "M√©dia", "Impacto na visibilidade: Moderado"
    else:
        return "Alta", "Impacto na visibilidade: Severo"

def get_mare_descricao(mare):
    """Retorna descri√ß√£o detalhada da mar√©"""
    if mare < 0.8:
        return "Baixa", "Condi√ß√µes de mar√© favor√°veis. Visibilidade subaqu√°tica otimizada."
    elif mare < 1.5:
        return "M√©dia", "Condi√ß√µes de mar√© est√°veis. Visibilidade subaqu√°tica adequada."
    else:
        return "Alta", "Condi√ß√µes de mar√© cr√≠ticas. Visibilidade subaqu√°tica comprometida."

def gerar_relatorio_texto(data_hora, fase_lunar, nome_fase, descricao_fase, 
                        vento, descricao_vento, impacto_vento,
                        precipitacao, descricao_precip, impacto_precip,
                        mare, descricao_mare, impacto_mare,
                        estacao, avaliacao, pontuacao, descricao, recomendacao):
    """Gera o conte√∫do do email em formato texto simples"""
    return f"""
{'='*60}
üåä CONDICION√îMETRO DE MERGULHO - {CONFIG['CIDADE']}/{CONFIG['ESTADO']} üåä
{'='*60}

üìÖ Data e Hora: {data_hora.strftime('%d/%m/%Y %H:%M')}

üåô Fase da Lua: {nome_fase}
   {descricao_fase}

üí® Vento: {descricao_vento} ({vento:.1f} km/h)
   {impacto_vento}

üåßÔ∏è Precipita√ß√£o: {descricao_precip} ({precipitacao:.1f} mm)
   {impacto_precip}

üåä Mar√©: {descricao_mare} ({mare:.1f} m)
   {impacto_mare}

üåû Esta√ß√£o: {estacao}
   {'Esta√ß√£o ideal para mergulho!' if estacao in ['Ver√£o', 'Primavera'] else 'Condi√ß√µes aceit√°veis para mergulho'}

{'='*60}
üìä AVALIA√á√ÉO: {avaliacao} ({pontuacao}/100)
{descricao}
Recomenda√ß√£o: {recomendacao}
{'='*60}

üåê Dados fornecidos por StormGlass API e OpenWeatherMap API
üë®‚Äçüíª Desenvolvido pelo pirata H√©ric Moura
üåç Visite: {CONFIG['SITE_URL']}

{'='*60}
üìß Este √© um email autom√°tico. Voc√™ receber√° esta mensagem todos os dias √†s 7h da manh√£.
{'='*60}
"""

def enviar_email(conteudo):
    """Envia o email com o relat√≥rio"""
    try:
        msg = MIMEMultipart()
        msg["From"] = CONFIG["EMAIL_USER"]
        msg["To"] = ", ".join(CONFIG["EMAIL_DESTINATARIOS"])
        msg["Subject"] = f"Relat√≥rio de Condi√ß√µes de Mergulho - {CONFIG['CIDADE']} - {datetime.now().strftime('%d/%m/%Y')}"
        
        # Adiciona o conte√∫do como texto simples
        msg.attach(MIMEText(conteudo, "plain"))
        
        server = smtplib.SMTP(CONFIG["SMTP_SERVER"], CONFIG["SMTP_PORT"])
        server.starttls()
        server.login(CONFIG["EMAIL_USER"], CONFIG["EMAIL_PASS"])
        server.sendmail(CONFIG["EMAIL_USER"], CONFIG["EMAIL_DESTINATARIOS"], msg.as_string())
        server.quit()
        print("‚úÖ Email enviado com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao enviar email: {e}")
        return False

def main():
    try:
        print("\n" + "="*60)
        print("üåä CONDICION√îMETRO DE MERGULHO - SANTOS/SP üåä")
        print("="*60 + "\n")
        
        # Obter data/hora atual
        data_hora = datetime.now()
        print(f"üìÖ Data e Hora: {data_hora.strftime('%d/%m/%Y %H:%M')}\n")
        
        # Consultar condi√ß√µes
        fase_lunar = get_fase_lua(CONFIG["LATITUDE"], CONFIG["LONGITUDE"], data_hora)
        nome_fase, descricao_fase = get_fase_lua_descricao(fase_lunar)
        print(f"üåô Fase da Lua: {nome_fase}")
        print(f"   {descricao_fase}\n")
        
        vento = get_vento(CONFIG["LATITUDE"], CONFIG["LONGITUDE"])
        descricao_vento, impacto_vento = get_vento_descricao(vento)
        print(f"üí® Vento: {descricao_vento} ({vento:.1f} km/h)")
        print(f"   {impacto_vento}\n")
        
        precipitacao = get_precipitacao(CONFIG["LATITUDE"], CONFIG["LONGITUDE"])
        descricao_precip, impacto_precip = get_precipitacao_descricao(precipitacao)
        print(f"üåßÔ∏è Precipita√ß√£o: {descricao_precip} ({precipitacao:.1f} mm)")
        print(f"   {impacto_precip}\n")
        
        mare = get_mare(CONFIG["LATITUDE"], CONFIG["LONGITUDE"], data_hora)
        descricao_mare, impacto_mare = get_mare_descricao(mare)
        print(f"üåä Mar√©: {descricao_mare} ({mare:.1f} m)")
        print(f"   {impacto_mare}\n")
        
        estacao = get_estacao()
        print(f"üåû Esta√ß√£o: {estacao}")
        print(f"   {'Esta√ß√£o ideal para mergulho!' if estacao in ['Ver√£o', 'Primavera'] else 'Condi√ß√µes aceit√°veis para mergulho'}\n")
        
        # Avaliar condi√ß√µes gerais com crit√©rios mais rigorosos
        # Condi√ß√µes ideais: vento < 10km/h, precipita√ß√£o < 2mm, mar√© < 1.2m
        condicoes_ideais = (vento < 10 and precipitacao < 2 and mare < 1.2)
        
        # Condi√ß√µes boas: vento < 15km/h, precipita√ß√£o < 5mm, mar√© < 1.5m
        condicoes_boas = (vento < 15 and precipitacao < 5 and mare < 1.5)
        
        # Condi√ß√µes regulares: vento < 20km/h, precipita√ß√£o < 10mm, mar√© < 1.8m
        condicoes_regulares = (vento < 20 and precipitacao < 10 and mare < 1.8)
        
        # Ajuste de pontua√ß√£o baseado na esta√ß√£o
        ajuste_estacao = 0
        if estacao == "Ver√£o":
            ajuste_estacao = 10  # B√¥nus para ver√£o
        elif estacao == "Primavera":
            ajuste_estacao = 5   # B√¥nus para primavera
        elif estacao == "Inverno":
            ajuste_estacao = -5  # Penalidade para inverno
        else:  # Outono
            ajuste_estacao = 0
        
        if condicoes_ideais:
            avaliacao = "üåü √ìTIMO"
            pontuacao = min(95 + ajuste_estacao, 100)  # M√°ximo de 100
            descricao = "Condi√ß√µes clim√°ticas ideais para mergulho."
            recomendacao = "Condi√ß√µes clim√°ticas est√°veis e favor√°veis para pr√°tica de mergulho."
        elif condicoes_boas:
            avaliacao = "üëç BOM"
            pontuacao = min(70 + ajuste_estacao, 95)  # M√°ximo de 95
            descricao = "Condi√ß√µes clim√°ticas favor√°veis para mergulho."
            recomendacao = "Condi√ß√µes clim√°ticas aceit√°veis para pr√°tica de mergulho."
        elif condicoes_regulares:
            avaliacao = "‚ö†Ô∏è REGULAR"
            pontuacao = min(50 + ajuste_estacao, 70)  # M√°ximo de 70
            descricao = "Condi√ß√µes clim√°ticas moderadas para mergulho."
            recomendacao = "Condi√ß√µes clim√°ticas inst√°veis. Recomenda-se cautela."
        else:
            avaliacao = "‚ùå N√ÉO RECOMENDADO"
            pontuacao = max(27 + ajuste_estacao, 27)  # M√≠nimo de 27
            descricao = "Condi√ß√µes clim√°ticas desfavor√°veis para mergulho."
            recomendacao = "Condi√ß√µes clim√°ticas inst√°veis. Recomenda-se adiar a pr√°tica de mergulho."
        
        # Adiciona informa√ß√£o sobre o ajuste da esta√ß√£o na descri√ß√£o
        if ajuste_estacao != 0:
            descricao += f" {'(B√¥nus de +' + str(ajuste_estacao) + ' pontos pela esta√ß√£o)' if ajuste_estacao > 0 else '(Penalidade de ' + str(abs(ajuste_estacao)) + ' pontos pela esta√ß√£o)'}"
        
        print("="*60)
        print(f"üìä AVALIA√á√ÉO: {avaliacao} ({pontuacao}/100)")
        print(f"üí° {descricao}")
        print(f"üéØ {recomendacao}")
        print("="*60 + "\n")
        
        # Gerar e enviar email
        conteudo = gerar_relatorio_texto(
            data_hora, fase_lunar, nome_fase, descricao_fase,
            vento, descricao_vento, impacto_vento,
            precipitacao, descricao_precip, impacto_precip,
            mare, descricao_mare, impacto_mare,
            estacao, avaliacao, pontuacao, descricao, recomendacao
        )
        
        if enviar_email(conteudo):
            print("‚úÖ Relat√≥rio enviado por email com sucesso!")
        else:
            print("‚ùå Falha ao enviar o relat√≥rio por email.")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 